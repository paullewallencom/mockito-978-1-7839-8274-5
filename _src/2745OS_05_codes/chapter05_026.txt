
@RunWith(MockitoJUnitRunner.class)
public class PersonDataUpdatorTest {

	@Spy TaxFactorService taxFactorService;

    @InjectMocks PersonDataUpdator systemUnderTest;

    @Test
    public void should_fail_to_update_tax_factor_for_person_due_to_having_undefined_country() throws ConnectException {
        willAnswer(withExceptionForPersonWithUndefinedCountry()).given(taxFactorService).updateMeanTaxFactor(any(Person.class), anyDouble());
        
        when(systemUnderTest).processTaxDataFor(new Person());
	    
	    then(caughtException()).isInstanceOf(UndefinedCountryException.class);
    }

	private Answer withExceptionForPersonWithUndefinedCountry() {
		return new Answer() {
		    @Override
		    public Object answer(InvocationOnMock invocation) throws Throwable {
		        if (invocation.getArguments().length > 0) {
		            Person person = (Person) invocation.getArguments()[0];
		            if (!person.isCountryDefined()) {
		                throw new UndefinedCountryException("Undefined country");
		            }
		        }
		        return null;
		    }
		};
	}
	
}
